{"version":3,"sources":["components/Input.js","components/Result.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","_useState","useState","_useState2","Object","slicedToArray","noResi","setNoResi","react_default","a","createElement","Fragment","className","value","onChange","e","target","type","placeholder","onClick","preventDefault","checkResi","Result","_props$result","result","error","cnote","detail","content","concat","cnote_receiver_name","cnote_receiver_addr1","cnote_receiver_addr2","cnote_receiver_addr3","city_name","cnote_shipper_name","cnote_shipper_addr1","cnote_shipper_addr2","cnote_shipper_addr3","cnote_shipper_city","cnote_no","cnote_services_code","cnote_weight","Date","cnote_date","toString","cnote_pod_date","App","state","details","username","api_key","formBody","keys","map","key","encodeURIComponent","join","targetUrl","fetch","method","body","then","data","json","_this","setState","Input_Input","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.939ec524.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\nexport const Input = (props) => {\r\n  const [noResi, setNoResi] = useState(\"\");\r\n  const checkResi = (e) => {\r\n    e.preventDefault();\r\n    props.checkResi(noResi);\r\n  } \r\n  return (\r\n    <>\r\n      <div className=\"field columns\">\r\n        <div className=\"column\" />\r\n        <div className=\"control column\">\r\n          <input \r\n            value={noResi}\r\n            onChange={e => setNoResi(e.target.value)}\r\n            className=\"input is-medium\" \r\n            type=\"text\" \r\n            placeholder=\"No Resi\" \r\n          />\r\n        </div>\r\n        <div className=\"column\" />\r\n      </div>\r\n      <div className=\"has-text-centered\">\r\n        <a className=\"button is-primary\" onClick={checkResi}>Cek Resi</a>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\nexport default (props) => {\r\n  const { error, cnote, detail } = props.result;\r\n  const content = error ? <p className=\"has-text-danger\">{`Error: ${error}`}</p> : (\r\n    cnote ? (\r\n      <>\r\n        <div className=\"columns\">\r\n          <div className=\"has-text-centered column\">\r\n            <div className=\"box\">\r\n              <p className=\"has-text-primary\">Penerima</p>\r\n              <p>Nama: {cnote.cnote_receiver_name}</p>\r\n              <p>Alamat: {detail[0].cnote_receiver_addr1}{detail[0].cnote_receiver_addr1 && ','} {detail[0].cnote_receiver_addr2}{detail[0].cnote_receiver_addr2 && ','} {detail[0].cnote_receiver_addr3}</p>\r\n              <p>Kota: {cnote.city_name}</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"has-text-centered column\">\r\n            <div className=\"box\">\r\n              <p className=\"has-text-primary\">Pengirim</p>\r\n              <p>Nama: {detail[0].cnote_shipper_name}</p>\r\n              <p>Alamat: {detail[0].cnote_shipper_addr1}, {detail[0].cnote_shipper_addr2}, {detail[0].cnote_shipper_addr3}</p>\r\n              <p>Kota: {detail[0].cnote_shipper_city}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"columns is-centered detail-etc\">\r\n        <div className=\"has-text-centered is-two-thirds column\">\r\n          <div className=\"box\">\r\n            <p className=\"has-text-primary\">Lain - lain</p>\r\n            <p>AWB: {cnote.cnote_no}</p>\r\n            <p>Layanan: {cnote.cnote_services_code}</p>\r\n            <p>Berat: {detail[0].cnote_weight}</p>\r\n            <p>Dikirim: {new Date(cnote.cnote_date).toString()}</p>\r\n            <p>Sampai: {new Date(cnote.cnote_pod_date).toString()}</p>\r\n          </div>\r\n        </div>\r\n        </div>\r\n      </>\r\n    ) : null\r\n  );\r\n  return (\r\n    <div className=\"result card\">\r\n      <header className=\"card-header\">\r\n        <p className=\"has-text-centered card-header-title\">\r\n          Hasil Pengecekan\r\n        </p>\r\n      </header>\r\n      <div className=\"card-content\">\r\n        <div className=\"content\">\r\n          {content}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\n\nimport { Input } from './components/Input';\nimport Result from './components/Result';\n\nimport 'bulma/css/bulma.css';\nimport './index.css';\n\nclass App extends Component {\n  state = {\n    result: {}\n  };\n  checkResi = (noResi) => {\n    // callAPi\n    const details = {\n      username: 'TESTAPI',\n      api_key: '25c898a9faea1a100859ecd9ef674548'\n    };\n    const formBody = Object.keys(details).map(key => encodeURIComponent(key) + '=' + encodeURIComponent(details[key])).join('&');\n    \n    const proxyUrl = 'https://cors-anywhere.herokuapp.com/',\n    targetUrl = `http://apiv2.jne.co.id:10101/tracing/api/list/cnoteretails/cnote/${noResi}`;\n    fetch(proxyUrl + targetUrl, {\n      method: 'POST',\n      body: formBody\n    })\n    .then(data => data.json())\n    .then(result => {\n      this.setState({\n        result\n      })\n    })\n  }\n  render() {\n    return (\n      <div className=\"container\">\n        <h1 className=\"title has-text-centered\">CEK RESI</h1>\n        <h2 className=\"subtitle has-text-centered\">Masukkan No Resi yang ingin di cek</h2>\n        <Input checkResi={this.checkResi}/>\n        <Result result={this.state.result}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}